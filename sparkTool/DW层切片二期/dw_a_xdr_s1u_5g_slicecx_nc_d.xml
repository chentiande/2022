<AggrSqlConfig topicId="dw_a_xdr_s1u_5g_slicecx_nc_d" period="1d"
               desc="5G SA(S1U) 小区/终端/场景/切片/业务/用户数/天表">
      <functions>
	  </functions>

    <tempTables>
	 <tableName>tmp_dw_a_xdr_s1u_5g_slic</tableName>
<sql>
<![CDATA[select 
apn_ambr_dl,
app_id,
app_name,
cell_name,
apn_ambr_ul,
chkhand_bad,
connect_bad,
chkhand_good,
connect_good,
datapack_duration,
delay_first_transaction_first_respackt,
delay_setup_first_transaction,
delay_setup_first_transaction_cnt,
dl_average_jitter,
dl_average_jitter_cnt,
dl_data_transduration,
dl_download_bat,
dl_download_good,
dl_ipfrag_packs,
dl_packet_number_stg1,
dl_packet_number_stg2,
dl_packet_number_stg3,
dl_packet_number_stg4,
dl_tcp_reordering_packet,
dl_tcp_retrans_packet,
dnn_apn,
dns_reply_delay,
dns_reply_delay_cnt,
duration,
f_5qi,
f_packets_response_delay,
f_packets_response_delay_cnt,
f_packets_response_delaybad,
f_packets_response_delaygood,
first_screen_delay,
first_screen_delay_cnt,
first_screen_delay_nodns,
first_screen_delay_nodns_cnt,
first_screen_delaybad,
first_screen_delaygood,
first_tcp_pageopen_delay,
first_tcp_pageopen_delay_cnt,
first_tcp_pageopen_delay_nodns,
first_tcp_pageopen_delay_nodns_cnt,
game_conn_delay,
game_conn_delay_cnt,
game_tcp_server_delay,
game_tcp_server_delay_cnt,
game_tcp_termeral_delay,
game_tcp_termeral_delay_cnt,
gnb_enb_id,
gnb_enb_ip,
gnb_enb_name,
http_bigflow_delay,
http_bigflow_delay_cnt,
http_bigflow_duration,
http_bigflow_input_octets,
http_dl_rate_data,
http_dl_rate_data_cnt,
http_dns_reply_delaybad,
http_dns_reply_delaygood,
http_download_low_cnt,
http_noresponse_num,
http_request_num,
http_resp_delay,
http_resp_delay_cnt,
http_response_fail_num,
http_server_fail_num,
http_smalflow_delay,
http_smalflow_delay_cnt,
http_smalflow_duration,
http_smalflow_input_octets,
http_succ_num,
http_tcp_server_delay,
http_tcp_server_delay_cnt,
http_tcp_termeral_delay,
http_tcp_termeral_delay_cnt,
http_termeral_fail_num,
im_tcp_tcp_server_delay,
im_tcp_tcp_server_delay_cnt,
im_tcp_termeral_delay,
im_tcp_termeral_delay_cnt,
imei_pei_model_name,
imei_pei_tac,
imei_pei_vendor_name,
imsi_supi,
input_octets,
input_packet,
input_udp_packet,
latitude,
longitude,
msisdn,
n3_http_cnt,
n3_video_cnt,
nc_ec_id,
nci_eci,
nssai_sd,
nssai_sd_name,
nssai_sst,
nssai_sst_name,
output_octets,
output_packet,
output_udp_packet,
owner_province_id,
owner_province_name,
page_open_succ_cnt,
pageopen_delaybad,
pageopen_delaygood,
pgw_ip,
province_id,
province_name,
rat,
region_id,
region_name,
response_delay,
response_delay_cnt,
rtt_dl_termeral_bat,
rtt_dl_termeral_good,
rtt_ul_server_bat,
rtt_ul_server_good,
sgw_upf_ip,
sub_app_id,
sub_app_name,
tac,
tcp_connect_delay,
tcp_connect_delay_cnt,
tcp_connect_fail_cnt,
tcp_connect_request_cnt,
tcp_connect_succ_cnt,
tcp_receive_delay,
tcp_receive_delay_cnt,
tcp_request_cnt,
tcp_send_delay,
tcp_send_delay_cnt,
tcp_server_delay_cnt,
tcp_server_response_cnt,
tcp_setup_ack_delay,
tcp_setup_ack_delay_cnt,
tcp_setup_response_delay,
tcp_setup_response_delay_cnt,
tcp_sr_delay,
tcp_sr_delay_cnt,
tcp_sr_request_cnt,
tcp_sr_request_succ_cnt,
tcp_termeral_delay_cnt,
tcp_termeral_response_cnt,
total_data,
ue_ambr_dl,
ue_ambr_ul,
ul_average_jitter,
ul_average_jitter_cnt,
ul_data_transduration,
ul_ipfrag_packs,
ul_packet_number_stg1,
ul_packet_number_stg2,
ul_packet_number_stg3,
ul_packet_number_stg4,
ul_tcp_reordering_packet,
ul_tcp_retrans_packet,
0 as video_avgspeed_bad,
0 as video_avgspeed_good,
0 as video_bit_rate,
0 as video_bit_rate_cnt,
0 as video_cache_throughput,
0 as video_cache_throughput_cnt,
0 as video_dl_duration,
0 as video_halt_rate,
0 as video_haltr_ate_cnt,
0 as video_recover_duration,
0 as video_size,
video_tcp_server_delay,
video_tcp_server_delay_cnt,
video_tcp_termeral_delay,
video_tcp_termeral_delay_cnt,
0 as video_throughput,
0 as video_throughput_cnt,
0 as videobit_code_bad,
0 as videobit_code_good,
0 as videobit_code_rate,
0 as videobit_code_rate_cnt,
0 as videoplay_halt_bad,
0 as videoplay_halt_cnt,
0 as videoplay_halt_good,
0 as videoplay_request_cnt,
0 as videoplay_succ_cnt,
0 as videoplay_wait_duration,
delay_first_transaction_first_respackt_cnt,
1 as user_cnt
 from ${source_db}.ods_ct_xdr_lte_5g_s1u_n3_http
where p_date>='${p_date_start}' and p_date<'${p_date_end}' and interface=100
 union all
 select
apn_ambr_dl,
app_id,
app_name,
cell_name,
apn_ambr_ul,
0 as chkhand_bad,
0 as connect_bad,
0 as chkhand_good,
0 as connect_good,
0 as datapack_duration,
delay_first_transaction_first_respackt,
delay_setup_first_transaction,
delay_setup_first_transaction_cnt,
dl_average_jitter,
dl_average_jitter_cnt,
dl_data_transduration,
dl_download_bat,
dl_download_good,
dl_ipfrag_packs,
dl_packet_number_stg1,
dl_packet_number_stg2,
dl_packet_number_stg3,
dl_packet_number_stg4,
dl_tcp_reordering_packet,
dl_tcp_retrans_packet,
dnn_apn,
0 as dns_reply_delay,
0 as dns_reply_delay_cnt,
duration,
f_5qi,
0 as f_packets_response_delay,
0 as f_packets_response_delay_cnt,
0 as f_packets_response_delaybad,
0 as f_packets_response_delaygood,
0 as first_screen_delay,
0 as first_screen_delay_cnt,
0 as first_screen_delay_nodns,
0 as first_screen_delay_nodns_cnt,
0 as first_screen_delaybad,
0 as first_screen_delaygood,
0 as first_tcp_pageopen_delay,
0 as first_tcp_pageopen_delay_cnt,
0 as first_tcp_pageopen_delay_nodns,
0 as first_tcp_pageopen_delay_nodns_cnt,
0 as game_conn_delay,
0 as game_conn_delay_cnt,
0 as game_tcp_server_delay,
0 as game_tcp_server_delay_cnt,
0 as game_tcp_termeral_delay,
0 as game_tcp_termeral_delay_cnt,
gnb_enb_id,
gnb_enb_ip,
gnb_enb_name,
0 as http_bigflow_delay,
0 as http_bigflow_delay_cnt,
0 as http_bigflow_duration,
0 as http_bigflow_input_octets,
0 as http_dl_rate_data,
0 as http_dl_rate_data_cnt,
0 as http_dns_reply_delaybad,
0 as http_dns_reply_delaygood,
0 as http_download_low_cnt,
0 as http_noresponse_num,
0 as http_request_num,
0 as http_resp_delay,
0 as http_resp_delay_cnt,
0 as http_response_fail_num,
0 as http_server_fail_num,
0 as http_smalflow_delay,
0 as http_smalflow_delay_cnt,
0 as http_smalflow_duration,
0 as http_smalflow_input_octets,
0 as http_succ_num,
0 as http_tcp_server_delay,
0 as http_tcp_server_delay_cnt,
0 as http_tcp_termeral_delay,
0 as http_tcp_termeral_delay_cnt,
0 as http_termeral_fail_num,
0 as im_tcp_tcp_server_delay,
0 as im_tcp_tcp_server_delay_cnt,
0 as im_tcp_termeral_delay,
0 as im_tcp_termeral_delay_cnt,
imei_pei_model_name,
imei_pei_tac,
imei_pei_vendor_name,
imsi_supi,
input_octets,
input_packet,
input_udp_packet,
latitude,
longitude,
msisdn,
n3_http_cnt,
n3_video_cnt,
nc_ec_id,
nci_eci,
nssai_sd,
nssai_sd_name,
nssai_sst,
nssai_sst_name,
output_octets,
output_packet,
output_udp_packet,
owner_province_id,
owner_province_name,
0 as page_open_succ_cnt,
0 as pageopen_delaybad,
0 as pageopen_delaygood,
pgw_ip,
province_id,
province_name,
rat,
region_id,
region_name,
0 as response_delay,
0 as response_delay_cnt,
rtt_dl_termeral_bat,
rtt_dl_termeral_good,
rtt_ul_server_bat,
rtt_ul_server_good,
sgw_upf_ip,
sub_app_id,
sub_app_name,
tac,
tcp_connect_delay,
tcp_connect_delay_cnt,
tcp_connect_fail_cnt,
tcp_connect_request_cnt,
tcp_connect_succ_cnt,
0 as tcp_receive_delay,
0 as tcp_receive_delay_cnt,
0 as tcp_request_cnt,
0 as tcp_send_delay,
0 as tcp_send_delay_cnt,
tcp_server_delay_cnt,
tcp_server_response_cnt,
tcp_setup_ack_delay,
tcp_setup_ack_delay_cnt,
tcp_setup_response_delay,
tcp_setup_response_delay_cnt,
0 as tcp_sr_delay,
0 as tcp_sr_delay_cnt,
0 as tcp_sr_request_cnt,
0 as tcp_sr_request_succ_cnt,
tcp_termeral_delay_cnt,
tcp_termeral_response_cnt,
total_data,
ue_ambr_dl,
ue_ambr_ul,
ul_average_jitter,
ul_average_jitter_cnt,
ul_data_transduration,
ul_ipfrag_packs,
ul_packet_number_stg1,
ul_packet_number_stg2,
ul_packet_number_stg3,
ul_packet_number_stg4,
ul_tcp_reordering_packet,
ul_tcp_retrans_packet,
video_avgspeed_bad,
video_avgspeed_good,
video_bit_rate,
video_bit_rate_cnt,
video_cache_throughput,
video_cache_throughput_cnt,
video_dl_duration,
video_halt_rate,
video_haltr_ate_cnt,
video_recover_duration,
video_size,
video_tcp_server_delay,
video_tcp_server_delay_cnt,
video_tcp_termeral_delay,
video_tcp_termeral_delay_cnt,
video_throughput,
video_throughput_cnt,
videobit_code_bad,
videobit_code_good,
videobit_code_rate,
videobit_code_rate_cnt,
videoplay_halt_bad,
videoplay_halt_cnt,
videoplay_halt_good,
videoplay_request_cnt,
videoplay_succ_cnt,
videoplay_wait_duration,
delay_first_transaction_first_respackt_cnt,
1 as user_cnt
 from ${source_db}.ods_ct_xdr_lte_5g_s1u_n3_video
where p_date>='${p_date_start}' and p_date<'${p_date_end}' and interface=100
 	]]>
		</sql>
    </tempTables>

    <resultTables>
	        <resultTable>
	<sql>
		<![CDATA[
			insert overwrite table ${result_db}.dw_a_xdr_s1u_5g_slicecx_nc_d partition(p_date='${p_date}')
		select 
		substr('${p_start_time}',1,8) as day_id,
imsi_supi as imsi,
msisdn as msisdn,
owner_province_id as user_province_id,
owner_province_name as user_province_desc,
imei_pei_tac as imei_tac,
imei_pei_vendor_name as vendor,
imei_pei_model_name as type_desc,
dnn_apn as apn,
nssai_sst as nssai_sst_id,
nssai_sst_name as nssai_sst_desc,
nssai_sd as nssai_sd_id,
nssai_sd_name as nssai_sd_desc,
rat as rattype,
f_5qi as qi5_id,
tac as tac,
nci_eci as eci,
nc_ec_id as ec_id,
cell_name as ec_desc,
gnb_enb_ip as enb_ip,
gnb_enb_id as enb_id,
gnb_enb_name as enb_desc,
region_id as region_id,
region_name as region_desc,
province_id as province_id,
province_name as province_desc,
longitude as longitude,
latitude as latitude,
sgw_upf_ip as sgwip,
pgw_ip as pgwip,
app_id as app_id,
app_name as app_desc,
sub_app_id as subapp_id,
sub_app_name as subapp_desc,
ue_ambr_ul as ue_ambr_ul,
ue_ambr_dl as ue_ambr_dl,
apn_ambr_ul as apn_ambr_ul,
apn_ambr_dl as apn_ambr_dl,
max(case when video_bit_rate>4000 then 1 else 0 end) as whether_hd_video,
max(case when nssai_sd='01002' then 1 else 0 end) as vip_enterprise,
max(case when nssai_sd='01003' then 1 else 0 end) as vip_user,
'' as qi5_desc,
'' as bearerid,
sum(user_cnt) as user_cnt,
'' as bearerqos,
sum(duration) as duration,
sum(output_octets) as ul_data,
sum(input_octets) as dl_data,
sum(total_data) as tot_data,
sum(n3_http_cnt+n3_video_cnt) as tot_request_num,
sum(output_packet) as ul_ip_packet,
sum(input_packet) as dl_ip_packet,
sum(ul_ipfrag_packs) as ul_ip_frag_packs,
sum(dl_ipfrag_packs) as dl_ip_frag_packs,
sum(ul_tcp_retrans_packet) as ul_tcp_renum,
sum(dl_tcp_retrans_packet) as dl_tcp_renum,
sum(ul_tcp_reordering_packet) as ul_tcp_discordnum,
sum(dl_tcp_reordering_packet) as dl_tcp_discordnum,
avg((case when sum(nvl(tcp_setup_response_delay_cnt,0))>0 then (sum(nvl(tcp_setup_response_delay,0)))/(sum(nvl(tcp_setup_response_delay_cnt,0))) else 0 end)) as tcp_response_delay,
avg((case when sum(nvl(tcp_setup_ack_delay_cnt,0))>0 then (sum(nvl(tcp_setup_ack_delay,0)))/(sum(nvl(tcp_setup_ack_delay_cnt,0))) else 0 end)) as tcp_confirm_delay,
avg((case when sum(nvl(delay_setup_first_transaction_cnt,0))>0 then (sum(nvl(delay_setup_first_transaction,0)))/(sum(nvl(delay_setup_first_transaction_cnt,0))) else 0 end)) as tcp_succ_request_delay,
avg((case when sum(nvl(delay_first_transaction_first_respackt_cnt,0))>0 then (sum(nvl(delay_first_transaction_first_respackt,0)))/(sum(nvl(delay_first_transaction_first_respackt_cnt,0))) else 0 end)) as first_response_delay,
avg((case when sum(nvl(response_delay_cnt,0))>0 then (sum(nvl(response_delay,0)))/(sum(nvl(response_delay_cnt,0))) else 0 end)) as response_delay,
avg((case when sum(nvl(tcp_setup_ack_delay_cnt,0))>0 then (sum(nvl(tcp_setup_ack_delay,0)))/(sum(nvl(tcp_setup_ack_delay_cnt,0))) else 0 end)) as tcp_termeral_delay,
avg((case when sum(nvl(tcp_setup_response_delay_cnt,0))>0 then (sum(nvl(tcp_setup_response_delay,0)))/(sum(nvl(tcp_setup_response_delay_cnt,0))) else 0 end)) as tcp_server_delay,
sum(tcp_connect_request_cnt) as tcp_connect_request_num,
sum(tcp_connect_succ_cnt) as tcp_connect_succ_num,
sum(tcp_connect_fail_cnt) as tcp_connect_fail_cnt,
sum(tcp_server_response_cnt) as tcp_server_response_num,
sum(tcp_termeral_response_cnt) as tcp_termeral_response_num,
avg((case when sum(nvl(tcp_connect_delay_cnt,0))>0 then (sum(nvl(tcp_connect_delay,0)))/(sum(nvl(tcp_connect_delay_cnt,0))) else 0 end)) as tcp_connect_delay,
sum(ul_data_transduration) as ul_tcp_datatransduration,
sum(dl_data_transduration) as dl_tcp_datatransduration,
sum(ul_packet_number_stg1) as ul_packet_number_stg1,
sum(ul_packet_number_stg2) as ul_packet_number_stg2,
sum(ul_packet_number_stg3) as ul_packet_number_stg3,
sum(ul_packet_number_stg4) as ul_packet_number_stg4,
sum(dl_packet_number_stg1) as dl_packet_number_stg1,
sum(dl_packet_number_stg2) as dl_packet_number_stg2,
sum(dl_packet_number_stg3) as dl_packet_number_stg3,
sum(dl_packet_number_stg4) as dl_packet_number_stg4,
avg((case when sum(nvl(ul_average_jitter_cnt,0))>0 then (sum(nvl(ul_average_jitter,0)))/(sum(nvl(ul_average_jitter_cnt,0))) else 0 end)) as ul_average_jitter,
avg((case when sum(nvl(dl_average_jitter_cnt,0))>0 then (sum(nvl(dl_average_jitter,0)))/(sum(nvl(dl_average_jitter_cnt,0))) else 0 end)) as dl_average_jitter,
sum(output_octets) as http_ul_data,
sum(input_octets) as http_dl_data,
sum(total_data) as http_tot_data,
sum(duration) as http_duration,
'' as pagevolume,
sum(http_request_num) as http_request_num,
sum(http_succ_num) as http_succ_num,
sum(http_noresponse_num) as http_noresponse_num,
sum(http_response_fail_num) as http_response_fail_num,
sum(http_server_fail_num) as http_server_fail_num,
sum(http_termeral_fail_num) as http_termeral_fail_num,
sum(page_open_succ_cnt) as page_open_succ_num,
avg((case when sum(nvl(http_resp_delay_cnt,0))>0 then (sum(nvl(http_resp_delay,0)))/(sum(nvl(http_resp_delay_cnt,0))) else 0 end)) as http_resp_delay,
sum(tcp_request_cnt) as tcp_sr_request_num,
sum(tcp_sr_request_succ_cnt) as tcp_sr_request_succ_num,
avg((case when sum(nvl(tcp_sr_delay_cnt,0))>0 then (sum(nvl(tcp_sr_delay,0)))/(sum(nvl(tcp_sr_delay_cnt,0))) else 0 end)) as tcp_sr_delay,
avg((case when sum(nvl(tcp_send_delay_cnt,0))>0 then (sum(nvl(tcp_send_delay,0)))/(sum(nvl(tcp_send_delay_cnt,0))) else 0 end)) as tcp_send_delay,
avg((case when sum(nvl(tcp_receive_delay_cnt,0))>0 then (sum(nvl(tcp_receive_delay,0)))/(sum(nvl(tcp_receive_delay_cnt,0))) else 0 end)) as tcp_receive_delay,
sum(datapack_duration) as datapack_duration,
sum(http_bigflow_duration) as http_bigflow_duration,
sum(http_bigflow_input_octets) as http_bigflow_inputoctets,
avg((case when sum(nvl(http_bigflow_delay_cnt,0))>0 then (sum(nvl(http_bigflow_delay,0)))/(sum(nvl(http_bigflow_delay_cnt,0))) else 0 end)) as http_bigflow_delay,
sum(http_smalflow_duration) as http_smalflow_duration,
sum(http_smalflow_input_octets) as http_smalflow_inputoctets,
avg((case when sum(nvl(http_smalflow_delay_cnt,0))>0 then (sum(nvl(http_smalflow_delay,0)))/(sum(nvl(http_smalflow_delay_cnt,0))) else 0 end)) as http_smalflow_delay,
sum(tcp_termeral_delay_cnt) as tcp_termeral_delay_num,
sum(tcp_server_delay_cnt) as tcp_server_delay_num,
sum(tcp_sr_request_cnt) as http_response_delay_num,
sum(http_download_low_cnt) as http_download_low_num,
avg((case when sum(nvl(http_dl_rate_data_cnt,0))>0 then (sum(nvl(http_dl_rate_data,0)))/(sum(nvl(http_dl_rate_data_cnt,0))) else 0 end)) as http_dl_rate_data,
avg((case when sum(nvl(f_packets_response_delay_cnt,0))>0 then (sum(nvl(f_packets_response_delay,0)))/(sum(nvl(f_packets_response_delay_cnt,0))) else 0 end)) as f_packets_response_delay,
avg((case when sum(nvl(dns_reply_delay_cnt,0))>0 then (sum(nvl(dns_reply_delay,0)))/(sum(nvl(dns_reply_delay_cnt,0))) else 0 end)) as dns_reply_delay,
avg((case when app_id=2 and sum(nvl(tcp_connect_request_cnt,0))>0 then (sum(nvl(tcp_connect_succ_cnt,0)))/(sum(nvl(tcp_connect_request_cnt,0))) else 0 end)*100) as im_sendsucc_rat,
avg((case when sum(nvl(game_conn_delay_cnt,0))>0 then (sum(nvl(game_conn_delay,0)))/(sum(nvl(game_conn_delay_cnt,0))) else 0 end)) as game_conn_delay,
avg((case when sum(nvl(first_tcp_pageopen_delay_nodns_cnt,0))>0 then (sum(nvl(first_tcp_pageopen_delay_nodns,0)))/(sum(nvl(first_tcp_pageopen_delay_nodns_cnt,0))) else 0 end)) as first_tcp_pageopen_delay_nodns,
avg((case when sum(nvl(first_tcp_pageopen_delay_cnt,0))>0 then (sum(nvl(first_tcp_pageopen_delay,0)))/(sum(nvl(first_tcp_pageopen_delay_cnt,0))) else 0 end)) as first_tcp_pageopen_delay,
avg((case when sum(nvl(first_screen_delay_nodns_cnt,0))>0 then (sum(nvl(first_screen_delay_nodns,0)))/(sum(nvl(first_screen_delay_nodns_cnt,0))) else 0 end)) as first_screen_delay_nodns,
avg((case when sum(nvl(first_screen_delay_cnt,0))>0 then (sum(nvl(first_screen_delay,0)))/(sum(nvl(first_screen_delay_cnt,0))) else 0 end)) as first_screen_delay,
avg((case when sum(nvl(http_tcp_server_delay_cnt,0))>0 then (sum(nvl(http_tcp_server_delay,0)))/(sum(nvl(http_tcp_server_delay_cnt,0))) else 0 end)) as http_tcp_server_delay,
avg((case when sum(nvl(http_tcp_termeral_delay_cnt,0))>0 then (sum(nvl(http_tcp_termeral_delay,0)))/(sum(nvl(http_tcp_termeral_delay_cnt,0))) else 0 end)) as http_tcp_termeral_delay,
avg((case when sum(nvl(video_tcp_server_delay_cnt,0))>0 then (sum(nvl(video_tcp_server_delay,0)))/(sum(nvl(video_tcp_server_delay_cnt,0))) else 0 end)) as video_tcp_server_delay,
avg((case when sum(nvl(video_tcp_termeral_delay_cnt,0))>0 then (sum(nvl(video_tcp_termeral_delay,0)))/(sum(nvl(video_tcp_termeral_delay_cnt,0))) else 0 end)) as video_tcp_termeral_delay,
avg((case when sum(nvl(im_tcp_tcp_server_delay_cnt,0))>0 then (sum(nvl(im_tcp_tcp_server_delay,0)))/(sum(nvl(im_tcp_tcp_server_delay_cnt,0))) else 0 end)) as im_tcp_tcp_server_delay,
avg((case when sum(nvl(im_tcp_termeral_delay_cnt,0))>0 then (sum(nvl(im_tcp_termeral_delay,0)))/(sum(nvl(im_tcp_termeral_delay_cnt,0))) else 0 end)) as im_tcp_termeral_delay,
avg((case when sum(nvl(game_tcp_server_delay_cnt,0))>0 then (sum(nvl(game_tcp_server_delay,0)))/(sum(nvl(game_tcp_server_delay_cnt,0))) else 0 end)) as game_tcp_server_delay,
avg((case when sum(nvl(game_tcp_termeral_delay_cnt,0))>0 then (sum(nvl(game_tcp_termeral_delay,0)))/(sum(nvl(game_tcp_termeral_delay_cnt,0))) else 0 end)) as game_tcp_termeral_delay,
sum(first_screen_delaygood) as first_screen_delaygood,
sum(first_screen_delaybad) as first_screen_delaybad,
sum(f_packets_response_delaygood) as f_packets_response_delaygood,
sum(f_packets_response_delaybad) as f_packets_response_delaybad,
sum(pageopen_delaygood) as pageopen_delaygood,
sum(pageopen_delaybad) as pageopen_delaybad,
sum(dl_download_good) as http_dl_rate_datagood,
sum(dl_download_bat) as http_dl_rate_databad,
sum(http_dns_reply_delaygood) as http_dns_reply_delaygood,
sum(http_dns_reply_delaybad) as http_dns_reply_delaybad,
sum(connect_good) as connect_good,
sum(connect_bad) as connect_bad,
sum(chkhand_good) as chkhand_good,
sum(chkhand_bad) as chkhand_bad,
sum(output_octets) as video_ul_data,
sum(input_octets) as video_dl_data,
sum(total_data) as video_tot_data,
sum(duration) as video_duration,
sum(videoplay_wait_duration) as videoplay_wait_duration,
sum(videoplay_request_cnt) as videoplay_request_cnt,
sum(videoplay_succ_cnt) as videoplay_succ_cnt,
'' as videoplay_server_fail_num,
'' as videoplay_termeral_fail_num,
sum(videoplay_halt_cnt) as videoplay_halt_cnt,
sum(video_recover_duration) as video_recover_duration,
sum(video_size) as video_size,
sum(video_dl_duration) as video_dl_duration,
(case when sum(nvl(video_throughput_cnt,0))>0 then (sum(nvl(video_throughput,0)))/(sum(nvl(video_throughput_cnt,0))) else 0 end) as video_throughput,
(case when sum(nvl(video_bit_rate_cnt,0))>0 then (sum(nvl(video_bit_rate,0)))/(sum(nvl(video_bit_rate_cnt,0))) else 0 end) as video_bitrate,
(case when sum(nvl(videobit_code_rate_cnt,0))>0 then (sum(nvl(videobit_code_rate,0)))/(sum(nvl(videobit_code_rate_cnt,0))) else 0 end) as videobit_code_rate,
(case when sum(nvl(video_cache_throughput_cnt,0))>0 then (sum(nvl(video_cache_throughput,0)))/(sum(nvl(video_cache_throughput_cnt,0))) else 0 end) as videocachethroughput,
(case when sum(nvl(video_haltr_ate_cnt,0))>0 then (sum(nvl(video_halt_rate,0)))/(sum(nvl(video_haltr_ate_cnt,0))) else 0 end) as video_haltrate,
sum(video_avgspeed_good) as videoavgspeedgood,
sum(video_avgspeed_bad) as videoavgspeedbad,
sum(videoplay_halt_good) as videoplayhaltgood,
sum(videoplay_halt_bad) as videoplayhaltbad,
sum(videobit_code_good) as videobit_code_egood,
sum(videobit_code_bad) as videobit_code_bad,
sum(rtt_ul_server_good) as rtt_ul_server_good,
sum(rtt_ul_server_bat) as rtt_ul_server_bat,
sum(rtt_dl_termeral_good) as rtt_dl_termeral_good,
sum(rtt_dl_termeral_bat) as rtt_dl_termeral_bat,
(case when sum(nvl(output_packet,0))>0 then (sum(nvl(ul_tcp_retrans_packet,0)))/(sum(nvl(output_packet,0))) else 0 end)*100 as ul_tcp_renum_rat,
(case when sum(nvl(input_packet,0))>0 then (sum(nvl(dl_tcp_retrans_packet,0)))/(sum(nvl(input_packet,0))) else 0 end)*100 as dl_tcp_renum_rat,
(case when sum(nvl(output_packet,0))>0 then (sum(nvl(ul_tcp_reordering_packet,0)))/(sum(nvl(output_packet,0))) else 0 end)*100 as ul_tcp_discordnum_rat,
(case when sum(nvl(input_packet,0))>0 then (sum(nvl(dl_tcp_reordering_packet,0)))/(sum(nvl(input_packet,0))) else 0 end)*100 as dl_tcp_discordnum_rat,
(case when sum(nvl(duration,0))>0 then (sum(nvl(output_octets,0)))/(sum(nvl(duration,0))) else 0 end)*100 as ul_throughput_rat,
(case when sum(nvl(duration,0))>0 then (sum(nvl(input_octets,0)))/(sum(nvl(duration,0))) else 0 end)*100 as dl_throughput_rat,
(case when sum(nvl(ul_data_transduration,0))>0 then (sum(nvl((output_octets*8/1024),0)))/(sum(nvl((ul_data_transduration/1000),0))) else 0 end)*100 as ul_upload_rat,
(case when sum(nvl(dl_data_transduration,0))>0 then (sum(nvl((input_octets*8/1024),0)))/(sum(nvl((dl_data_transduration/1000),0))) else 0 end)*100 as ul_download_rat,
(case when sum(nvl(http_request_num,0))>0 then (sum(nvl(http_succ_num,0)))/(sum(nvl(http_request_num,0))) else 0 end)*100 as http_service_success_rat,
(case when sum(nvl(http_request_num,0))>0 then (sum(nvl(page_open_succ_cnt,0)))/(sum(nvl(http_request_num,0))) else 0 end)*100 as page_open_success_rat,
(case when sum(nvl(tcp_connect_request_cnt,0))>0 then (sum(nvl(tcp_connect_succ_cnt,0)))/(sum(nvl(tcp_connect_request_cnt,0))) else 0 end)*100 as tcp_build_success_rat,
(case when sum(nvl(tcp_connect_succ_cnt,0))>0 then (sum(nvl(tcp_server_response_cnt,0)))/(sum(nvl(tcp_connect_succ_cnt,0))) else 0 end)*100 as tcp_server_success_rat,
(case when sum(nvl(tcp_server_response_cnt,0))>0 then (sum(nvl(tcp_termeral_response_cnt,0)))/(sum(nvl(tcp_server_response_cnt,0))) else 0 end)*100 as tcp_termeral_success_rat,
(1-(case when sum(nvl(output_udp_packet,0))>0 then (sum(nvl(ul_packet_number_stg1+ul_packet_number_stg2+ul_packet_number_stg3+ul_packet_number_stg4,0)))/(sum(nvl(output_udp_packet,0))) else 0 end))*100 as ul_udp_packetloss_rat,
(1-(case when sum(nvl(input_udp_packet,0))>0 then (sum(nvl(dl_packet_number_stg1+dl_packet_number_stg2+dl_packet_number_stg3+dl_packet_number_stg4,0)))/(sum(nvl(input_udp_packet,0))) else 0 end))*100 as dl_udp_packetloss_rat,
(case when sum(nvl((output_packet+input_packet),0))>0 then (sum(nvl((ul_tcp_retrans_packet+dl_tcp_retrans_packet),0)))/(sum(nvl((output_packet+input_packet),0))) else 0 end)*100 as udp_packetloss_rat,
(case when sum(nvl(http_request_num,0))>0 then (sum(nvl(http_noresponse_num,0)))/(sum(nvl(http_request_num,0))) else 0 end)*100 as http_noresponse_req,
(case when sum(nvl(http_bigflow_duration,0))>0 then (sum(nvl(http_bigflow_input_octets,0)))/(sum(nvl(http_bigflow_duration,0))) else 0 end) as big_http_download_rat,
(case when sum(nvl(http_smalflow_duration,0))>0 then (sum(nvl(http_smalflow_input_octets,0)))/(sum(nvl(http_smalflow_duration,0))) else 0 end) as sm_http_download_rat,
(case when sum(nvl(f_packets_response_delaygood+f_packets_response_delaybad,0))>0 then (sum(nvl(f_packets_response_delaygood,0)))/(sum(nvl(f_packets_response_delaygood+f_packets_response_delaybad,0))) else 0 end)*100 as f_packets_response_good_rat,
(case when sum(nvl(dl_download_good+dl_download_bat,0))>0 then (sum(nvl(dl_download_good,0)))/(sum(nvl(dl_download_good+dl_download_bat,0))) else 0 end)*100 as http_download_good_rat,
(case when sum(nvl(http_dns_reply_delaygood+http_dns_reply_delaybad,0))>0 then (sum(nvl(http_dns_reply_delaygood,0)))/(sum(nvl(http_dns_reply_delaygood+http_dns_reply_delaybad,0))) else 0 end)*100 as http_dns_res_good_rat,
(case when sum(nvl(pageopen_delaygood+pageopen_delaybad,0))>0 then (sum(nvl(pageopen_delaygood,0)))/(sum(nvl(pageopen_delaygood+pageopen_delaybad,0))) else 0 end)*100 as page_open_good_rat,
(case when sum(nvl(first_screen_delaygood+first_screen_delaybad,0))>0 then (sum(nvl(first_screen_delaygood,0)))/(sum(nvl(first_screen_delaygood+first_screen_delaybad,0))) else 0 end)*100 as page_screen_good_rat,
(case when sum(nvl(connect_good+connect_bad,0))>0 then (sum(nvl(connect_good,0)))/(sum(nvl(connect_good+connect_bad,0))) else 0 end)*100 as im_good_rat,
(case when sum(nvl(chkhand_good+chkhand_bad,0))>0 then (sum(nvl(chkhand_good,0)))/(sum(nvl(chkhand_good+chkhand_bad,0))) else 0 end)*100 as game_good_rat,
(case when sum(nvl(video_avgspeed_good+video_avgspeed_bad,0))>0 then (sum(nvl(video_avgspeed_good,0)))/(sum(nvl(video_avgspeed_good+video_avgspeed_bad,0))) else 0 end)*100 as vide_speed_good_rat,
(case when sum(nvl(videoplay_halt_good+videoplay_halt_bad,0))>0 then (sum(nvl(videoplay_halt_good,0)))/(sum(nvl(videoplay_halt_good+videoplay_halt_bad,0))) else 0 end)*100 as vide_halt_good_rat,
(case when sum(nvl(videobit_code_good+videobit_code_bad,0))>0 then (sum(nvl(videobit_code_good,0)))/(sum(nvl(videobit_code_good+videobit_code_bad,0))) else 0 end)*100 as bit_code_rate_good_rat,
(case when sum(nvl(pageopen_delaygood+pageopen_delaybad,0))>0 then (sum(nvl(pageopen_delaygood,0)))/(sum(nvl(pageopen_delaygood+pageopen_delaybad,0))) else 0 end)*100*0.6+(case when sum(nvl(first_screen_delaygood+first_screen_delaybad,0))>0 then (sum(nvl(first_screen_delaygood,0)))/(sum(nvl(first_screen_delaygood+first_screen_delaybad,0))) else 0 end)*100*0.3+(case when sum(nvl(dl_download_good+dl_download_bat,0))>0 then (sum(nvl(dl_download_good,0)))/(sum(nvl(dl_download_good+dl_download_bat,0))) else 0 end)*100*0.1 as http_service_good_rat,
(case when sum(nvl(video_avgspeed_good+video_avgspeed_bad,0))>0 then (sum(nvl(video_avgspeed_good,0)))/(sum(nvl(video_avgspeed_good+video_avgspeed_bad,0))) else 0 end)*100*0.8+(case when sum(nvl(videoplay_halt_good+videoplay_halt_bad,0))>0 then (sum(nvl(videoplay_halt_good,0)))/(sum(nvl(videoplay_halt_good+videoplay_halt_bad,0))) else 0 end)*100*0.1+(case when sum(nvl(videobit_code_good+videobit_code_bad,0))>0 then (sum(nvl(videobit_code_good,0)))/(sum(nvl(videobit_code_good+videobit_code_bad,0))) else 0 end)*100*0.1 as vide_service_good_rat,
(case when sum(nvl(rtt_ul_server_good+rtt_ul_server_bat,0))>0 then (sum(nvl(rtt_ul_server_good,0)))/(sum(nvl(rtt_ul_server_good+rtt_ul_server_bat,0))) else 0 end)*100 as rtt_ul_server_good_rat,
(case when sum(nvl(rtt_dl_termeral_good+rtt_dl_termeral_bat,0))>0 then (sum(nvl(rtt_dl_termeral_good,0)))/(sum(nvl(rtt_dl_termeral_good+rtt_dl_termeral_bat,0))) else 0 end)*100 as rtt_dl_termeral_good_rat,
(case when sum(nvl(rtt_ul_server_good+rtt_ul_server_bat,0))>0 then (sum(nvl(rtt_ul_server_good,0)))/(sum(nvl(rtt_ul_server_good+rtt_ul_server_bat,0))) else 0 end)*100*0.3+(case when sum(nvl(rtt_dl_termeral_good+rtt_dl_termeral_bat,0))>0 then (sum(nvl(rtt_dl_termeral_good,0)))/(sum(nvl(rtt_dl_termeral_good+rtt_dl_termeral_bat,0))) else 0 end)*100*0.7 as rtt_service_good_rat,
0 as service_good_rat from tmp_dw_a_xdr_s1u_5g_slic
group by apn,apn_ambr_dl,app_desc,app_id,ec_desc,ec_id,eci,enb_desc,enb_id,enb_ip,imei_tac,imsi,latitude,longitude,msisdn,apn_ambr_ul,nssai_sd_id,nssai_sd_desc,nssai_sst_id,pgwip,province_desc,province_id,qi5_id,rattype,region_desc,region_id,sgwip,subapp_desc,subapp_id,tac,type_desc,ue_ambr_dl,ue_ambr_ul,nssai_sst_desc,user_province_id,vendor,vip_enterprise,vip_user,whether_hd_video,user_province_desc
						  ]]>
            </sql>
        </resultTable>
	</resultTables>
	</AggrSqlConfig>